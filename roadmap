0.01

  wwid new
  wwid next
  wwid recalculate
  wwid finish
  wwid help
  wwid import
  value - effort algorithm
  automatic prompting for recalculation

Later

  wwid search
  wwid export
  wwid checkin
  wwid sync (sync with another instance)
  Interactive input of missing options
  Web application (wwid serve)
  Android application
  Arbitrary metadata asociated with tasks
  Hooks for events (upon completion, etc)

App-Subcommander tests:

Now:

  - show help (no command, bad command, help command w/o args)
  - help with a command (cmd help $cmd, what happens if I define my own help subcommand?)
  - An unrecognized option prompts for a value if none is given (there should be a different error message, unless there's a slurpy hash)
  - If help wasn't expected, we should display any messages displayed (in testing)
  - Figure out the relationship between the TypeResolver and canonical names...
  - The Bool check in parse-option should probably be something like "doesn't require value"
  - What happens if they don't provide any subcommands?
  - Inheritance of commands/app options, overriding, etc
      - What happens if I override a non-subcommand with a subcommand? vice versa?
  - docs

Later:

  - Document how 'is ro' and 'is option' don't mix
  - Document how 'is option' implies 'is rw'
  - Document how slurpies all share the same type
  - Should we worry if a non-Str is passed to run?
  - What if a subcommand nextsame's its parent?  pos/named args?
  - how will --config work (if I have something like --interactive?)
  - what if the value for an option is optional? (ex. --password)
  - multis
  - slurpy app options

Extensions:

  - Shortened subcommand names
  - Interactive input of missing options
  - bash/zsh completion generation?
  - non-strict mode wrt. extra options
  - What if I want a default subcommand?
  - short options (-s) (add-on role, automatic setup a separate add-on role)
      - argument bundling (add-on role)
